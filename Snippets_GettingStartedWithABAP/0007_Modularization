REPORT znv_modularization_sample.

*=-=-=-= p224
*CLASS lcl_car DEFINITION.
*ENDCLASS.
*
*CLASS lcl_car IMPLEMENTATION.
*ENDCLASS.

*=-=-=-= p224
*CLASS lcl_car DEFINITION.
*ENDCLASS.
*
*DATA:
*    o_car TYPE REF TO lcl_car.
*
*CREATE OBJECT o_car.
*
*CLASS lcl_car IMPLEMENTATION.
*ENDCLASS.

*=-=-=-= p226
*CLASS lcl_car DEFINITION.
*  PUBLIC SECTION.
*    DATA:
*      d_fuel         TYPE i,
*      d_speed        TYPE i,
*      d_brand        TYPE string,
*      d_manufacturer TYPE string READ-ONLY.
*  PRIVATE SECTION.
*    DATA:
*        d_gear TYPE i.
*ENDCLASS.
*
*CLASS lcl_car IMPLEMENTATION.
*ENDCLASS.

*=-=-=-= p227
*CLASS lcl_car DEFINITION.
*  PUBLIC SECTION.
*    DATA:
*      d_fuel         TYPE i VALUE 100,
*      d_speed        TYPE i,
*      d_brand        TYPE string,
*      d_manufacturer TYPE string.
*    METHODS:
*      accelerate IMPORTING ip_accel_rate TYPE i
*                 EXPORTING ep_is_success TYPE bool,
*      decelerate,
*      refuel.
*  PRIVATE SECTION.
*    DATA:
*        d_gear TYPE i.
*ENDCLASS.
*
*DATA:
*    o_car TYPE REF TO lcl_car,
*    d_is_success TYPE bool.
*
*CREATE OBJECT o_car.
*
*o_car->accelerate( EXPORTING ip_accel_rate = 5
*                   IMPORTING ep_is_success = d_is_success ).
*
*IF d_is_success = abap_true.
*  WRITE: 'It worked!', /.
*ELSE.
*  WRITE: 'It did not work...', /.
*ENDIF.
*
*CLASS lcl_car IMPLEMENTATION.
*  METHOD accelerate.
*    IF d_fuel - 5 > 0.
*      d_speed = d_speed + ip_accel_rate.
*      d_fuel = d_fuel - 5.
*      d_is_success = abap_true.
*    ELSE.
*      d_is_success = abap_false.
*    ENDIF.
*  ENDMETHOD.
*
*  METHOD decelerate.
*    d_speed = d_speed - 5.
*    d_fuel = d_fuel - 2.
*  ENDMETHOD.
*
*  METHOD refuel.
*    DATA:
*        ld_max TYPE i VALUE 100.
*    d_fuel = ld_max.
*  ENDMETHOD.
*ENDCLASS.

*=-=-=-= p236
*CLASS lcl_car DEFINITION.
*  PUBLIC SECTION.
*    DATA:
*      d_fuel         TYPE i,
*      d_speed        TYPE i,
*      d_model        TYPE string,
*      d_manufacturer TYPE string.
*
*    METHODS:
*      accelerate
*        IMPORTING ip_accel_rate        TYPE i
*        RETURNING VALUE(rp_is_success) TYPE bool,
*      decelerate,
*      refuel,
*      constructor
*        IMPORTING
*          ip_manufacturer TYPE string
*          ip_model        TYPE string.
*  PRIVATE SECTION.
*    DATA:
*        d_gear TYPE i.
*ENDCLASS.
*
*DATA:
*  o_car        TYPE REF TO lcl_car,
*  d_is_success TYPE bool.
*
*CREATE OBJECT o_car
*  EXPORTING
*    ip_manufacturer = 'Toyota'
*    ip_model        = 'Tundra'.
*d_is_success = o_car->accelerate( 5 ).
*
*CLASS lcl_car IMPLEMENTATION.
*  METHOD constructor.
*    d_manufacturer = ip_manufacturer.
*    d_model = ip_model.
*  ENDMETHOD.
*
*  METHOD accelerate.
*    IF d_fuel - 5 > 0.
*      d_speed = d_speed + ip_accel_rate.
*      d_fuel = d_fuel - 5.
*      d_is_success = abap_true.
*    ELSE.
*      d_is_success = abap_false.
*    ENDIF.
*  ENDMETHOD.
*
*  METHOD decelerate.
*    d_speed = d_speed - 5.
*    d_fuel = d_fuel - 2.
*  ENDMETHOD.
*
*  METHOD refuel.
*    DATA:
*        ld_max TYPE i VALUE 100.
*    d_fuel = ld_max.
*  ENDMETHOD.
*ENDCLASS.

*=-=-=-= p238
*CLASS lcl_fibonacci DEFINITION.
*  PUBLIC SECTION.
*    METHODS: calculate IMPORTING ip_place        TYPE i
*                       RETURNING VALUE(rp_value) TYPE i.
*ENDCLASS.
*
*DATA: o_fib    TYPE REF TO lcl_fibonacci,
*      d_result TYPE i.
*
*CREATE OBJECT o_fib.
*d_result = o_fib->calculate( 5 ).
*WRITE: d_result, /.
*
*CLASS lcl_fibonacci IMPLEMENTATION.
*  METHOD calculate.
*    IF ip_place <= 1.
*      rp_value = ip_place.
*    ELSE.
*      rp_value = calculate( ip_place - 1 ) + calculate( ip_place - 2 ).
*    ENDIF.
*  ENDMETHOD.
*ENDCLASS.

*=-=-=-= p239
*CLASS lcl_car DEFINITION.
*  PUBLIC SECTION.
*    DATA:
*      d_fuel         TYPE i,
*      d_speed        TYPE i,
*      d_model        TYPE string,
*      d_manufacturer TYPE string.
*
*    METHODS:
*      accelerate
*        IMPORTING ip_accel_rate        TYPE i
*        RETURNING VALUE(rp_is_success) TYPE bool,
*      decelerate,
*      refuel,
*      constructor
*        IMPORTING
*          ip_manufacturer TYPE string
*          ip_model        TYPE string.
*  PRIVATE SECTION.
*    DATA:
*        d_gear TYPE i.
*ENDCLASS.
*
*CLASS lcl_truck DEFINITION INHERITING FROM lcl_car.
*ENDCLASS.
*
*DATA:
*  o_car        TYPE REF TO lcl_car,
*  o_truck      TYPE REF TO lcl_truck,
*  d_is_success TYPE bool.
*
*CREATE OBJECT o_car
*  EXPORTING
*    ip_manufacturer = 'Toyota'
*    ip_model        = 'Tundra'.
*d_is_success = o_car->accelerate( 5 ).
*
*CREATE OBJECT o_truck
*  EXPORTING
*    ip_manufacturer = 'Volvo'
*    ip_model        = 'Roadster'.
*o_truck->accelerate( 5 ).
*
*CLASS lcl_car IMPLEMENTATION.
*  METHOD constructor.
*    d_manufacturer = ip_manufacturer.
*    d_model = ip_model.
*  ENDMETHOD.
*
*  METHOD accelerate.
*    IF d_fuel - 5 > 0.
*      d_speed = d_speed + ip_accel_rate.
*      d_fuel = d_fuel - 5.
*      d_is_success = abap_true.
*    ELSE.
*      d_is_success = abap_false.
*    ENDIF.
*  ENDMETHOD.
*
*  METHOD decelerate.
*    d_speed = d_speed - 5.
*    d_fuel = d_fuel - 2.
*  ENDMETHOD.
*
*  METHOD refuel.
*    DATA:
*        ld_max TYPE i VALUE 100.
*    d_fuel = ld_max.
*  ENDMETHOD.
*ENDCLASS.
*
*CLASS lcl_truck IMPLEMENTATION.
*ENDCLASS.

*=-=-=-= p240
CLASS lcl_car DEFINITION.
  PUBLIC SECTION.
    DATA:
      d_fuel         TYPE i,
      d_speed        TYPE i,
      d_model        TYPE string,
      d_manufacturer TYPE string.

    METHODS:
      accelerate
        IMPORTING ip_accel_rate        TYPE i
        RETURNING VALUE(rp_is_success) TYPE bool,
      decelerate,
      refuel,
      constructor
        IMPORTING
          ip_manufacturer TYPE string
          ip_model        TYPE string.
  PRIVATE SECTION.
    DATA:
        d_gear TYPE i.
ENDCLASS.

CLASS lcl_truck DEFINITION INHERITING FROM lcl_car.
  PUBLIC SECTION.
    METHODS: accelerate REDEFINITION.
ENDCLASS.

DATA:
  o_car        TYPE REF TO lcl_car,
  o_truck      TYPE REF TO lcl_truck,
  d_is_success TYPE bool.

CREATE OBJECT o_car
  EXPORTING
    ip_manufacturer = 'Toyota'
    ip_model        = 'Tundra'.
d_is_success = o_car->accelerate( 5 ).

CREATE OBJECT o_truck
  EXPORTING
    ip_manufacturer = 'Volvo'
    ip_model        = 'Roadster'.
o_truck->accelerate( 5 ).

CLASS lcl_car IMPLEMENTATION.
  METHOD constructor.
    d_manufacturer = ip_manufacturer.
    d_model = ip_model.
  ENDMETHOD.

  METHOD accelerate.
    IF d_fuel - 5 > 0.
      d_speed = d_speed + ip_accel_rate.
      d_fuel = d_fuel - 5.
      d_is_success = abap_true.
    ELSE.
      d_is_success = abap_false.
    ENDIF.
  ENDMETHOD.

  METHOD decelerate.
    d_speed = d_speed - 5.
    d_fuel = d_fuel - 2.
  ENDMETHOD.

  METHOD refuel.
    DATA:
        ld_max TYPE i VALUE 100.
    d_fuel = ld_max.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_truck IMPLEMENTATION.
  METHOD accelerate.
    d_speed = 1.
    rp_is_success = abap_true.
  ENDMETHOD.
ENDCLASS.
